"""
Fichier principal pour lancer le bot Discord
"""
import os
from dotenv import load_dotenv
from engine import DiscordBot


def main():
    """Point d'entr√©e principal du bot"""
    # Charge les variables d'environnement depuis le fichier .env
    load_dotenv()

    # R√©cup√®re le token depuis les variables d'environnement
    token = os.getenv('DISCORD_TOKEN')
    owner_id = os.getenv('OWNER_ID')

    if not token:
        print("Erreur: DISCORD_TOKEN n'est pas d√©fini dans les variables d'environnement")
        print("Veuillez cr√©er un fichier .env avec votre token Discord")
        return

    if not owner_id:
        print("‚ö†Ô∏è OWNER_ID n'est pas d√©fini dans les variables d'environnement")
        print("üí° Les commandes de propri√©taire ne fonctionneront pas correctement")
        print("üìù Ajoutez OWNER_ID=votre_id_discord dans votre fichier .env")
    else:
        try:
            owner_id = int(owner_id)
            print(f"üëë Propri√©taire du bot d√©fini: {owner_id}")
        except ValueError:
            print("‚ùå OWNER_ID doit √™tre un nombre (votre ID Discord)")
            owner_id = None

    # Cr√©e et lance le bot
    bot = DiscordBot()

    # D√©finit l'owner ID si disponible
    if owner_id:
        bot.owner_id = owner_id

    # Initialiser le syst√®me de notifications de support
    try:
        from web_panel import set_bot_instance
        set_bot_instance(bot)
        print("üì± Syst√®me de notifications de support initialis√©")
    except ImportError as e:
        print(f"‚ö†Ô∏è Impossible d'importer le module web_panel: {e}")
    except Exception as e:
        print(f"‚ö†Ô∏è Erreur lors de l'initialisation des notifications: {e}")

    bot.run(token)


if __name__ == "__main__":
    main()
