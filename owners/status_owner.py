"""
Commandes de statut r√©serv√©es aux propri√©taires du bot
"""
import discord
from discord.ext import commands
from core.bot_owner_manager import is_bot_owner


class StatusOwnerCommands(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @commands.group(name="status_owner", aliases=["ststatus"], help="Commandes de statut pour propri√©taires", invoke_without_command=True)
    async def status_owner_group(self, ctx):
        """Commandes de gestion des statuts r√©serv√©es aux propri√©taires"""
        if not is_bot_owner(ctx.author.id):
            await ctx.send("‚ùå Ces commandes sont r√©serv√©es aux propri√©taires du bot.")
            return

        embed = discord.Embed(
            title="üéõÔ∏è Commandes de Statut - Propri√©taires",
            description="Contr√¥les avanc√©s du syst√®me de rotation des statuts",
            color=0x3498db
        )

        embed.add_field(
            name="üé¨ Contr√¥les",
            value="`!status_owner start` - D√©marrer la rotation\n"
                  "`!status_owner stop` - Arr√™ter la rotation\n"
                  "`!status_owner next` - Statut suivant\n"
                  "`!status_owner interval <secondes>` - Changer l'intervalle",
            inline=False
        )

        embed.add_field(
            name="üåü Statuts Sp√©ciaux",
            value="`!status_owner special maintenance [dur√©e]` - Mode maintenance\n"
                  "`!status_owner special update [dur√©e]` - Mode mise √† jour\n"
                  "`!status_owner special error [dur√©e]` - Mode erreur\n"
                  "`!status_owner special offline [dur√©e]` - Mode veille",
            inline=False
        )

        embed.set_footer(
            text="üí° Dur√©e en secondes, optionnelle pour les statuts sp√©ciaux")
        await ctx.send(embed=embed)

    @status_owner_group.command(name='start', aliases=['demarrer'])
    async def status_start(self, ctx):
        """D√©marre la rotation automatique des statuts."""
        if not is_bot_owner(ctx.author.id):
            await ctx.send("‚ùå Cette commande est r√©serv√©e aux propri√©taires du bot.")
            return

        if not hasattr(self.bot, 'status_rotator') or self.bot.status_rotator is None:
            await ctx.send("‚ùå Le syst√®me de rotation des statuts n'est pas initialis√©.")
            return

        rotator = self.bot.status_rotator

        if rotator.rotation_task and not rotator.rotation_task.done():
            await ctx.send("‚ö†Ô∏è La rotation des statuts est d√©j√† active.")
            return

        rotator.start_rotation()

        embed = discord.Embed(
            title="‚úÖ Rotation D√©marr√©e",
            description=f"La rotation automatique a √©t√© d√©marr√©e avec un intervalle de {rotator.rotation_interval} secondes.",
            color=0x2ecc71
        )

        await ctx.send(embed=embed)

    @status_owner_group.command(name='stop', aliases=['arreter'])
    async def status_stop(self, ctx):
        """Arr√™te la rotation automatique des statuts."""
        if not is_bot_owner(ctx.author.id):
            await ctx.send("‚ùå Cette commande est r√©serv√©e aux propri√©taires du bot.")
            return

        if not hasattr(self.bot, 'status_rotator') or self.bot.status_rotator is None:
            await ctx.send("‚ùå Le syst√®me de rotation des statuts n'est pas initialis√©.")
            return

        rotator = self.bot.status_rotator
        rotator.stop_rotation()

        embed = discord.Embed(
            title="‚èπÔ∏è Rotation Arr√™t√©e",
            description="La rotation automatique des statuts a √©t√© arr√™t√©e.",
            color=0xe74c3c
        )

        await ctx.send(embed=embed)

    @status_owner_group.command(name='next', aliases=['suivant'])
    async def status_next(self, ctx):
        """Passe au statut suivant manuellement."""
        if not is_bot_owner(ctx.author.id):
            await ctx.send("‚ùå Cette commande est r√©serv√©e aux propri√©taires du bot.")
            return

        if not hasattr(self.bot, 'status_rotator') or self.bot.status_rotator is None:
            await ctx.send("‚ùå Le syst√®me de rotation des statuts n'est pas initialis√©.")
            return

        rotator = self.bot.status_rotator

        try:
            await rotator._update_status()
            current_info = rotator.get_current_status_info()

            embed = discord.Embed(
                title="‚è≠Ô∏è Statut Suivant",
                description="Le statut a √©t√© mis √† jour manuellement.",
                color=0x3498db
            )

            if current_info:
                embed.add_field(
                    name="üìä Nouveau Statut",
                    value=f"**{current_info['name']}** ({current_info['type']})",
                    inline=False
                )

            await ctx.send(embed=embed)

        except Exception as e:
            await ctx.send(f"‚ùå Erreur lors de la mise √† jour du statut: {e}")

    @status_owner_group.command(name='interval', aliases=['intervalle'])
    async def status_interval(self, ctx, seconds: int):
        """Change l'intervalle de rotation des statuts."""
        if not is_bot_owner(ctx.author.id):
            await ctx.send("‚ùå Cette commande est r√©serv√©e aux propri√©taires du bot.")
            return

        if not hasattr(self.bot, 'status_rotator') or self.bot.status_rotator is None:
            await ctx.send("‚ùå Le syst√®me de rotation des statuts n'est pas initialis√©.")
            return

        if seconds < 10:
            await ctx.send("‚ùå L'intervalle minimum est de 10 secondes.")
            return

        if seconds > 3600:
            await ctx.send("‚ùå L'intervalle maximum est de 3600 secondes (1 heure).")
            return

        rotator = self.bot.status_rotator
        old_interval = rotator.rotation_interval
        rotator.set_rotation_interval(seconds)

        embed = discord.Embed(
            title="‚öôÔ∏è Intervalle Modifi√©",
            description=f"Intervalle chang√© de {old_interval}s √† {seconds}s",
            color=0x3498db
        )

        await ctx.send(embed=embed)

    @status_owner_group.command(name='special', aliases=['speciale'])
    async def status_special(self, ctx, status_type: str, duration: int = 0):
        """Active un statut sp√©cial temporaire."""
        if not is_bot_owner(ctx.author.id):
            await ctx.send("‚ùå Cette commande est r√©serv√©e aux propri√©taires du bot.")
            return

        if not hasattr(self.bot, 'status_rotator') or self.bot.status_rotator is None:
            await ctx.send("‚ùå Le syst√®me de rotation des statuts n'est pas initialis√©.")
            return

        valid_types = ['maintenance', 'update', 'error', 'offline']
        if status_type.lower() not in valid_types:
            await ctx.send(f"‚ùå Type de statut invalide. Types disponibles: {', '.join(valid_types)}")
            return

        rotator = self.bot.status_rotator

        try:
            if duration < 0:
                duration = 0
            elif duration > 3600:
                duration = 3600

            await rotator.set_special_status(status_type.lower(), duration)

            duration_text = f" pendant {duration} secondes" if duration > 0 else " ind√©finiment"
            embed = discord.Embed(
                title="üåü Statut Sp√©cial Activ√©",
                description=f"Statut **{status_type}** activ√©{duration_text}.",
                color=0xf39c12
            )

            await ctx.send(embed=embed)

        except Exception as e:
            await ctx.send(f"‚ùå Erreur lors de l'activation du statut sp√©cial: {e}")

    @commands.Cog.listener()
    async def on_command_error(self, ctx, error):
        """Gestion des erreurs pour les commandes de statut owner"""
        if ctx.command and ctx.command.qualified_name.startswith('status_owner'):
            if isinstance(error, commands.NotOwner):
                await ctx.send("‚ùå Cette commande est r√©serv√©e aux propri√©taires du bot.")
            elif isinstance(error, commands.MissingRequiredArgument):
                await ctx.send("‚ùå Argument manquant. Utilisez `!help status_owner` pour voir l'aide.")
            elif isinstance(error, commands.BadArgument):
                await ctx.send("‚ùå Argument invalide. V√©rifiez les types attendus.")


async def setup(bot):
    await bot.add_cog(StatusOwnerCommands(bot))
