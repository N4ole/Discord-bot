"""
Commandes pr√©fix√©es - Module d'annonces (r√©serv√© aux propri√©taires du bot)
"""
from bot_owner_manager import is_bot_owner
import discord
from discord.ext import commands
import asyncio
from datetime import datetime
import os
import sys
sys.path.append(os.path.dirname(os.path.dirname(__file__)))


class AnnouncePrefixe(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @commands.command(name="annonce", help="Envoie une annonce √† tous les propri√©taires de serveurs (propri√©taires du bot uniquement)")
    async def annonce(self, ctx, *, message: str = None):
        """Envoie un message priv√© √† tous les propri√©taires des serveurs o√π le bot est pr√©sent"""

        # V√©rifier si l'utilisateur est propri√©taire du bot
        if not is_bot_owner(ctx.author.id):
            await ctx.send("‚ùå Cette commande est r√©serv√©e aux propri√©taires du bot.")
            return

        if not message:
            await ctx.send("‚ùå Veuillez fournir un message √† envoyer.\n"
                           "**Usage:** `!annonce <votre message>`")
            return

        # Message de confirmation avant envoi
        embed = discord.Embed(
            title="üîî Confirmation d'Annonce",
            description=f"**Message √† envoyer:**\n{message}",
            color=0xffa500,
            timestamp=datetime.now()
        )

        # Compter les serveurs et propri√©taires uniques
        total_guilds = len(self.bot.guilds)
        unique_owners = set()

        for guild in self.bot.guilds:
            if guild.owner:
                unique_owners.add(guild.owner.id)

        embed.add_field(
            name="üìä Statistiques",
            value=f"‚Ä¢ **Serveurs:** {total_guilds}\n"
            f"‚Ä¢ **Propri√©taires uniques:** {len(unique_owners)}",
            inline=False
        )

        embed.add_field(
            name="‚ö†Ô∏è Attention",
            value="Cette action enverra le message √† tous les propri√©taires de serveurs.\n"
                  "R√©agissez avec ‚úÖ pour confirmer ou ‚ùå pour annuler.",
            inline=False
        )

        embed.set_footer(
            text="Annonce Bot", icon_url=self.bot.user.avatar.url if self.bot.user.avatar else None)

        confirmation_msg = await ctx.send(embed=embed)

        # Ajouter les r√©actions
        await confirmation_msg.add_reaction("‚úÖ")
        await confirmation_msg.add_reaction("‚ùå")

        def check(reaction, user):
            return (user == ctx.author and
                    str(reaction.emoji) in ["‚úÖ", "‚ùå"] and
                    reaction.message.id == confirmation_msg.id)

        try:
            reaction, user = await self.bot.wait_for('reaction_add', timeout=60.0, check=check)

            if str(reaction.emoji) == "‚ùå":
                await confirmation_msg.edit(embed=discord.Embed(
                    title="‚ùå Annonce Annul√©e",
                    description="L'envoi de l'annonce a √©t√© annul√©.",
                    color=0xff0000
                ))
                return

            # Proc√©der √† l'envoi
            await self.send_announcement(ctx, message, confirmation_msg)

        except asyncio.TimeoutError:
            await confirmation_msg.edit(embed=discord.Embed(
                title="‚è∞ D√©lai Expir√©",
                description="Aucune r√©ponse re√ßue. Annonce annul√©e.",
                color=0x808080
            ))

    async def send_announcement(self, ctx, message, confirmation_msg):
        """Envoie l'annonce √† tous les propri√©taires de serveurs"""

        # Mettre √† jour le message de confirmation
        progress_embed = discord.Embed(
            title="üì§ Envoi en Cours...",
            description="Envoi de l'annonce aux propri√©taires de serveurs...",
            color=0x00ff00
        )
        await confirmation_msg.edit(embed=progress_embed)

        # Pr√©parer l'embed de l'annonce
        announcement_embed = discord.Embed(
            title="üì¢ Annonce Officielle",
            description=message,
            color=0x0099ff,
            timestamp=datetime.now()
        )

        announcement_embed.add_field(
            name="ü§ñ Informations",
            value=f"Cette annonce concerne le bot **{self.bot.user.name}** pr√©sent sur votre serveur.",
            inline=False
        )

        announcement_embed.set_footer(
            text=f"Annonce envoy√©e par {ctx.author} ‚Ä¢ {self.bot.user.name}",
            icon_url=self.bot.user.avatar.url if self.bot.user.avatar else None
        )

        # Statistiques d'envoi
        sent_count = 0
        failed_count = 0
        skipped_count = 0
        processed_owners = set()

        for guild in self.bot.guilds:
            if not guild.owner:
                continue

            # √âviter d'envoyer plusieurs fois au m√™me propri√©taire
            if guild.owner.id in processed_owners:
                skipped_count += 1
                continue

            processed_owners.add(guild.owner.id)

            try:
                # Cr√©er un embed personnalis√© pour chaque propri√©taire
                personal_embed = announcement_embed.copy()
                personal_embed.add_field(
                    name="üè† Votre Serveur",
                    value=f"**{guild.name}** ({guild.member_count} membres)",
                    inline=True
                )

                await guild.owner.send(embed=personal_embed)
                sent_count += 1

                # Attendre un peu entre chaque envoi pour √©viter le rate limiting
                await asyncio.sleep(1)

            except discord.Forbidden:
                # L'utilisateur a d√©sactiv√© les MPs ou a bloqu√© le bot
                failed_count += 1
                continue
            except discord.HTTPException as e:
                # Erreur HTTP (rate limit, etc.)
                failed_count += 1
                print(f"‚ùå Erreur HTTP lors de l'envoi √† {guild.owner}: {e}")
                continue
            except Exception as e:
                # Autres erreurs
                failed_count += 1
                print(
                    f"‚ùå Erreur inattendue lors de l'envoi √† {guild.owner}: {e}")
                continue

        # R√©sultats finaux
        results_embed = discord.Embed(
            title="‚úÖ Annonce Termin√©e",
            color=0x00ff00,
            timestamp=datetime.now()
        )

        results_embed.add_field(
            name="üìä R√©sultats",
            value=f"‚Ä¢ **Envoy√©s:** {sent_count}\n"
            f"‚Ä¢ **√âchecs:** {failed_count}\n"
            f"‚Ä¢ **Ignor√©s (doublons):** {skipped_count}\n"
            f"‚Ä¢ **Total trait√©:** {len(processed_owners)}",
            inline=False
        )

        if failed_count > 0:
            results_embed.add_field(
                name="‚ö†Ô∏è Note",
                value="Certains envois ont √©chou√© (MPs d√©sactiv√©s, bot bloqu√©, etc.)",
                inline=False
            )

        results_embed.set_footer(text="Annonce Bot")

        await confirmation_msg.edit(embed=results_embed)

        # Log de l'action
        print(
            f"üì¢ Annonce envoy√©e par {ctx.author} ({ctx.author.id}): {sent_count}/{len(processed_owners)} r√©ussie(s)")


async def setup(bot):
    await bot.add_cog(AnnouncePrefixe(bot))
