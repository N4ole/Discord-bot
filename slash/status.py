"""
Commandes slash pour g√©rer le syst√®me de rotation des statuts
"""

import discord
from discord.ext import commands
from discord import app_commands
import asyncio


class StatusCommands(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @app_commands.command(name="status_info", description="Affiche les informations sur le syst√®me de rotation des statuts")
    @app_commands.describe()
    async def status_info(self, interaction: discord.Interaction):
        """Affiche les informations sur le syst√®me de rotation des statuts."""
        if not hasattr(self.bot, 'status_rotator') or self.bot.status_rotator is None:
            await interaction.response.send_message("‚ùå Le syst√®me de rotation des statuts n'est pas initialis√©.", ephemeral=True)
            return

        rotator = self.bot.status_rotator
        current_info = rotator.get_current_status_info()

        embed = discord.Embed(
            title="üîÑ Syst√®me de Rotation des Statuts",
            description="Informations sur le syst√®me de rotation automatique",
            color=0x3498db
        )

        if current_info:
            embed.add_field(
                name="üìä Statut Actuel",
                value=f"**Nom:** {current_info['name']}\n"
                f"**Type:** {current_info['type']}\n"
                f"**√âtat:** {current_info['status']}\n"
                f"**Position:** {current_info['index'] + 1}/{current_info['total']}",
                inline=False
            )

        embed.add_field(
            name="‚öôÔ∏è Configuration",
            value=f"**Intervalle:** {rotator.rotation_interval} secondes\n"
            f"**Statuts disponibles:** {len(rotator.statuses)}\n"
            f"**Rotation active:** {'‚úÖ Oui' if rotator.rotation_task and not rotator.rotation_task.done() else '‚ùå Non'}",
            inline=False
        )

        embed.add_field(
            name="üéØ Statuts Sp√©ciaux",
            value="‚Ä¢ üîß Maintenance\n‚Ä¢ üÜï Mise √† jour\n‚Ä¢ ‚ö†Ô∏è Erreur\n‚Ä¢ üí§ Veille",
            inline=True
        )

        embed.add_field(
            name="üì± Contr√¥les",
            value="‚Ä¢ `/status_start` - D√©marrer\n‚Ä¢ `/status_stop` - Arr√™ter\n‚Ä¢ `/status_next` - Suivant\n‚Ä¢ `/status_special` - Sp√©cial",
            inline=True
        )

        embed.set_footer(
            text="üí° Seuls les propri√©taires du bot peuvent contr√¥ler le syst√®me")

        await interaction.response.send_message(embed=embed)

    @app_commands.command(name="status_start", description="D√©marre la rotation automatique des statuts")
    async def status_start(self, interaction: discord.Interaction):
        """D√©marre la rotation automatique des statuts."""
        # V√©rifier si l'utilisateur est propri√©taire du bot
        # Remplacez par vos IDs
        if interaction.user.id not in [882673962778382356]:
            await interaction.response.send_message("‚ùå Seuls les propri√©taires du bot peuvent utiliser cette commande.", ephemeral=True)
            return

        if not hasattr(self.bot, 'status_rotator') or self.bot.status_rotator is None:
            await interaction.response.send_message("‚ùå Le syst√®me de rotation des statuts n'est pas initialis√©.", ephemeral=True)
            return

        rotator = self.bot.status_rotator

        if rotator.rotation_task and not rotator.rotation_task.done():
            await interaction.response.send_message("‚ö†Ô∏è La rotation des statuts est d√©j√† active.", ephemeral=True)
            return

        rotator.start_rotation()

        embed = discord.Embed(
            title="‚úÖ Rotation D√©marr√©e",
            description="La rotation automatique des statuts a √©t√© d√©marr√©e avec succ√®s.",
            color=0x2ecc71
        )
        embed.add_field(
            name="‚öôÔ∏è Configuration",
            value=f"**Intervalle:** {rotator.rotation_interval} secondes\n**Statuts:** {len(rotator.statuses)} disponibles",
            inline=False
        )

        await interaction.response.send_message(embed=embed)

    @app_commands.command(name="status_stop", description="Arr√™te la rotation automatique des statuts")
    async def status_stop(self, interaction: discord.Interaction):
        """Arr√™te la rotation automatique des statuts."""
        # V√©rifier si l'utilisateur est propri√©taire du bot
        # Remplacez par vos IDs
        if interaction.user.id not in [882673962778382356]:
            await interaction.response.send_message("‚ùå Seuls les propri√©taires du bot peuvent utiliser cette commande.", ephemeral=True)
            return

        if not hasattr(self.bot, 'status_rotator') or self.bot.status_rotator is None:
            await interaction.response.send_message("‚ùå Le syst√®me de rotation des statuts n'est pas initialis√©.", ephemeral=True)
            return

        rotator = self.bot.status_rotator
        rotator.stop_rotation()

        embed = discord.Embed(
            title="‚èπÔ∏è Rotation Arr√™t√©e",
            description="La rotation automatique des statuts a √©t√© arr√™t√©e.",
            color=0xe74c3c
        )

        await interaction.response.send_message(embed=embed)

    @app_commands.command(name="status_next", description="Passe au statut suivant manuellement")
    async def status_next(self, interaction: discord.Interaction):
        """Passe au statut suivant manuellement."""
        # V√©rifier si l'utilisateur est propri√©taire du bot
        # Remplacez par vos IDs
        if interaction.user.id not in [882673962778382356]:
            await interaction.response.send_message("‚ùå Seuls les propri√©taires du bot peuvent utiliser cette commande.", ephemeral=True)
            return

        if not hasattr(self.bot, 'status_rotator') or self.bot.status_rotator is None:
            await interaction.response.send_message("‚ùå Le syst√®me de rotation des statuts n'est pas initialis√©.", ephemeral=True)
            return

        rotator = self.bot.status_rotator

        try:
            await rotator._update_status()
            current_info = rotator.get_current_status_info()

            embed = discord.Embed(
                title="‚è≠Ô∏è Statut Suivant",
                description="Le statut a √©t√© mis √† jour manuellement.",
                color=0x3498db
            )

            if current_info:
                embed.add_field(
                    name="üìä Nouveau Statut",
                    value=f"**Nom:** {current_info['name']}\n**Type:** {current_info['type']}",
                    inline=False
                )

            await interaction.response.send_message(embed=embed)

        except Exception as e:
            await interaction.response.send_message(f"‚ùå Erreur lors de la mise √† jour du statut: {e}", ephemeral=True)

    @app_commands.command(name="status_special", description="Active un statut sp√©cial temporaire")
    @app_commands.describe(
        type="Type de statut sp√©cial √† activer",
        duration="Dur√©e en secondes (optionnel, 0 = permanent)"
    )
    @app_commands.choices(type=[
        app_commands.Choice(name="üîß Maintenance", value="maintenance"),
        app_commands.Choice(name="üÜï Mise √† jour", value="update"),
        app_commands.Choice(name="‚ö†Ô∏è Erreur", value="error"),
        app_commands.Choice(name="üí§ Veille", value="offline")
    ])
    async def status_special(self, interaction: discord.Interaction, type: str, duration: int = 0):
        """Active un statut sp√©cial temporaire."""
        # V√©rifier si l'utilisateur est propri√©taire du bot
        # Remplacez par vos IDs
        if interaction.user.id not in [882673962778382356]:
            await interaction.response.send_message("‚ùå Seuls les propri√©taires du bot peuvent utiliser cette commande.", ephemeral=True)
            return

        if not hasattr(self.bot, 'status_rotator') or self.bot.status_rotator is None:
            await interaction.response.send_message("‚ùå Le syst√®me de rotation des statuts n'est pas initialis√©.", ephemeral=True)
            return

        rotator = self.bot.status_rotator

        try:
            # Valider la dur√©e
            if duration < 0:
                duration = 0
            elif duration > 3600:  # Maximum 1 heure
                duration = 3600

            await rotator.set_special_status(type, duration if duration > 0 else None)

            embed = discord.Embed(
                title="üåü Statut Sp√©cial Activ√©",
                description=f"Le statut sp√©cial **{type}** a √©t√© activ√©.",
                color=0x9b59b6
            )

            if duration > 0:
                embed.add_field(
                    name="‚è∞ Dur√©e",
                    value=f"{duration} secondes\n*La rotation normale reprendra automatiquement*",
                    inline=False
                )
            else:
                embed.add_field(
                    name="‚è∞ Dur√©e",
                    value="Permanent\n*Utilisez `/status_start` pour reprendre la rotation*",
                    inline=False
                )

            await interaction.response.send_message(embed=embed)

        except Exception as e:
            await interaction.response.send_message(f"‚ùå Erreur lors de l'activation du statut sp√©cial: {e}", ephemeral=True)

    @app_commands.command(name="status_interval", description="Change l'intervalle de rotation des statuts")
    @app_commands.describe(seconds="Nouvel intervalle en secondes (minimum 10)")
    async def status_interval(self, interaction: discord.Interaction, seconds: int):
        """Change l'intervalle de rotation des statuts."""
        # V√©rifier si l'utilisateur est propri√©taire du bot
        # Remplacez par vos IDs
        if interaction.user.id not in [882673962778382356]:
            await interaction.response.send_message("‚ùå Seuls les propri√©taires du bot peuvent utiliser cette commande.", ephemeral=True)
            return

        if not hasattr(self.bot, 'status_rotator') or self.bot.status_rotator is None:
            await interaction.response.send_message("‚ùå Le syst√®me de rotation des statuts n'est pas initialis√©.", ephemeral=True)
            return

        if seconds < 10:
            await interaction.response.send_message("‚ùå L'intervalle minimum est de 10 secondes.", ephemeral=True)
            return

        if seconds > 3600:
            await interaction.response.send_message("‚ùå L'intervalle maximum est de 3600 secondes (1 heure).", ephemeral=True)
            return

        rotator = self.bot.status_rotator
        old_interval = rotator.rotation_interval
        rotator.set_rotation_interval(seconds)

        embed = discord.Embed(
            title="‚öôÔ∏è Intervalle Modifi√©",
            description="L'intervalle de rotation a √©t√© mis √† jour.",
            color=0x3498db
        )
        embed.add_field(
            name="üîÑ Changement",
            value=f"**Ancien:** {old_interval} secondes\n**Nouveau:** {seconds} secondes",
            inline=False
        )
        embed.add_field(
            name="üí° Note",
            value="Le changement prendra effet au prochain cycle de rotation.",
            inline=False
        )

        await interaction.response.send_message(embed=embed)


async def setup(bot):
    await bot.add_cog(StatusCommands(bot))
